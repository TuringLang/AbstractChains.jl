var documenterSearchIndex = {"docs":
[{"location":"#AbstractChains.jl","page":"AbstractChains.jl","title":"AbstractChains.jl","text":"","category":"section"},{"location":"#AbstractChains.AbstractChain","page":"AbstractChains.jl","title":"AbstractChains.AbstractChain","text":"AbstractChains.AbstractChain\n\nAn abstract type for Markov chains, i.e., a data structure which stores samples obtained from Markov chain Monte Carlo (MCMC) sampling.\n\nMarkov chains should generally have dictionary-like behaviour, where keys are mapped to matrices of values.\n\nNote that, despite its name, an AbstractChain can store multiple chains (e.g. when sampling in parallel, or when combining chains from multiple runs). The main reason why this needs to be a singular form is because the package name is already AbstractChains (plural).\n\n\n\n\n\n","category":"type"},{"location":"#AbstractChains.chain_indices","page":"AbstractChains.jl","title":"AbstractChains.chain_indices","text":"AbstractChains.chain_indices(chn)\n\nObtain the indices of each chain in the AbstractChain object chn.\n\nThis function should return an AbstractVector{<:Integer}.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractChains.get_data","page":"AbstractChains.jl","title":"AbstractChains.get_data","text":"AbstractChains.get_data(chn, key)\n\nObtain the data associated with key from the AbstractChain object chn.\n\nThis function should return an AbstractMatrix where the rows correspond to iterations and columns correspond to chains.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractChains.iter_indices","page":"AbstractChains.jl","title":"AbstractChains.iter_indices","text":"AbstractChains.iter_indices(chn)\n\nObtain the indices of each iteration for the AbstractChain object chn.\n\nThis function should return an AbstractVector{<:Integer}.\n\n\n\n\n\n","category":"function"},{"location":"#AbstractChains.nchains-Tuple{AbstractChain}","page":"AbstractChains.jl","title":"AbstractChains.nchains","text":"AbstractChains.nchains(chn)\n\nObtain the number of chains in the AbstractChain object chn.\n\nThe default implementation calculates the length of AbstractChains.chain_indices(chn). You can define your own method if you have a more efficient way of obtaining this information.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractChains.niters-Tuple{AbstractChain}","page":"AbstractChains.jl","title":"AbstractChains.niters","text":"AbstractChains.niters(chn)\n\nObtain the number of iterations in the AbstractChain object chn.\n\nThe default implementation calculates the length of AbstractChains.iter_indices(chn). You can define your own method if you have a more efficient way of obtaining this information.\n\n\n\n\n\n","category":"method"},{"location":"#AbstractChains.test_interface","page":"AbstractChains.jl","title":"AbstractChains.test_interface","text":"AbstractChains.test_interface(chn)\n\nTest that the AbstractChains object chn implements the required interface.\n\n\n\n\n\n","category":"function"}]
}
